#ifndef _RAYCASTING_SHADER_TMPFILE
#define _RAYCASTING_SHADER_TMPFILE

const char vertexShader[] = 
"void main()\n"
"{\n"
	"gl_Position = ftransform();\n"
"}\n";

const char pixelShader[] = 
"uniform vec3 caminfo;\n"
"uniform mat3 invView;\n"
"uniform vec3 boxMin;\n"
"uniform vec3 boxMax;\n"
"uniform vec3 boxSize;\n"
"uniform vec3 eyePos;\n"
"uniform int step;\n"
"uniform sampler3D tex;\n"
"uniform float densityScale;\n"
"struct RES\n"
"{\n"
	"int flag;\n"
	"float tnear;\n"
	"float tfar;\n"
"};\n"
"RES intersectBox(vec3 ori, vec3 dir)\n"
"{\n"
	"RES res;\n"
	"res.flag = 0;\n"
	"res.tnear = 0;\n"
	"res.tfar = 0;\n"
	"vec3 invR = vec3(1.0,1.0,1.0) / dir;\n"
    "vec3 tbot = invR * (boxMin - ori);\n"
    "vec3 ttop = invR * (boxMax - ori);\n"
    "vec3 tmin = min(ttop, tbot);\n"
    "vec3 tmax = max(ttop, tbot);\n"
    "float largest_tmin = max(max(tmin.x, tmin.y), max(tmin.x, tmin.z));\n"
    "float smallest_tmax = min(min(tmax.x, tmax.y), min(tmax.x, tmax.z));\n"
	"res.tnear = largest_tmin;\n"
	"res.tfar = smallest_tmax;\n"
	"res.flag = smallest_tmax > largest_tmin ? 1 : 0;\n"
	"return res;\n"
"}\n"
"void main()\n"
"{\n"
	"float x = gl_FragCoord.x;\n"
	"float y = gl_FragCoord.y;\n"
	"float width = caminfo.x;\n"
	"float height = caminfo.y;\n"
	"float focal = caminfo.z;\n"
	"vec3 dir = vec3(x - (width-1.0)/2.0 ,y - (height-1.0)/2.0,-focal);\n"

	"dir /= length(dir);\n"
	"vec3 dir1 = invView*dir;\n"
	"dir1 /= length(dir1);\n"
	"RES res = intersectBox(eyePos,dir1);\n"
	"if(res.flag != 0)\n"
	"{\n"
		"float intensity = 0;\n"
		"vec3 pos = (eyePos + dir1*res.tnear - boxMin)/boxSize;\n"
		"float steplen = (res.tfar - res.tnear) / step;\n"
		"vec3 posstep = steplen * dir1 / boxSize;\n"
		"steplen /= boxSize.x;\n"
		"for(int i = 0;i < step;i++)\n"
		"{\n"
			"intensity += steplen * texture3D(tex, pos).r;\n"
			"pos += posstep;\n"
		"}\n"
		"gl_FragColor.xyzw = vec4(intensity*densityScale,intensity*densityScale,intensity*densityScale,exp(-intensity*densityScale));\n"
	"}\n"
"}\n";

#endif